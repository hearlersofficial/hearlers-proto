syntax = "proto3";

package com.hearlers.v1.service;

import "com/hearlers/v1/model/counsel.proto";

option java_package = "com.hearlers.api.proto.v1.service";
option java_multiple_files = true;

// 김도훈 TODO: DB 구조랑 이거 오늘 대충 쓴거 데이터 스키마 최종본 정의해서 주고
// 김도훈 TODO: User 생성됨 이벤트 발행
// 이시흔 TODO: User쪽 연결 다 하기
// 김성현 TODO: DB 스키마 바탕으로 Domain 객체 정의


// DB와 도메인의 생김새가 다 나온 상태
// R&R Counsel 쪽 도메인
// 김도훈 -> 프롬프트 CRUD 및 PROTO -> 통해 Instruction CRUD 및 PROTO
// 김성현 -> 상담과 회차 쪽에서 바뀐 프롬프트를 끌어 쓰고, 회차를 끝내는 로직 디벨롭
// 이시흔 -> 어드민?? 이라고 해야하나, admin 인증 인가 JWT develop, ADMIN JWT 기반으로 프롬프트 CRUD API 제공
// kakaoId === 서비스별로 사람 카카오 계정별로 고유하거든..! 근데 kakao Login + 특정 kakaoId 인 경우에만 admin JWT 주면은
// 별도의 로그인을 안만들어도 됨 개 **짜치긴** 함,....ㅋㅋㄴㅋㅋ 어드민이 카카오에 종속적임. 근데 개발비용 개 낮음
// AdminTable이 필요없고, user Service GRPC를 만들 필요도 없음
// admin JWT 본질 -> 무상태성 + dbIO 없음, 어드민은 refresh안하면 DB IO X 없이 accessToken 기반 인증



// LAST: 다 합쳐서 DIALOGUE 제작

// TODO: USER_CREATED 시 이벤트를 통해 모든 Counselor 별 Dialogue 생성 (유저 생성과 동기화)

service CounselService {

    // 상담 (한 사이클)
    // TODO: 한 사이클의 끝을 어떻게 지정할 지 결정
    rpc CreateCounsel (CreateCounselRequest) returns (CreateCounselResponse);
    // TODO: 상담사 별로 조회
    rpc FindCounsels (FindCounselsRequest) returns (FindCounselsResponse);
    rpc FindCounselById (FindCounselByIdRequest) returns (FindCounselByIdResponse);

    // 상담 메시지 (상담 중 하나의 채팅팅)
    rpc CreateMessage (CreateMessageRequest) returns (CreateMessageResponse);
    rpc FindMessages (FindMessagesRequest) returns (FindMessagesResponse);
    rpc ReactMessage (ReactMessageRequest) returns (ReactMessageResponse);

    // 상담사
    rpc CreateCounselor (CreateCounselorRequest) returns (CreateCounselorResponse);
    rpc FindCounselors (FindCounselorsRequest) returns (FindCounselorsResponse);
    rpc FindCounselorById (FindCounselorByIdRequest) returns (FindCounselorByIdResponse);
    rpc UpdateCounselor (UpdateCounselorRequest) returns (UpdateCounselorResponse);

    // 상담사와 유저의 관계
    // TODO: CQRS 패턴으로 뷰 테이블을 만들어 놓고 그냥 꺼내서 준다.
    // Relationship은 읽을 시 싱딤시와, 상담사의 모든 Counsels를 다 가지고 오는게 의미있는 단위
    // Relationship 뷰 테이블에 이미 상담사와 모든 유저의 대화 내용을 미리 조인해둔 뷰 테이블을 만들어 놓고 그냥 꺼내서 준다.
    // DDD를 안함
    // 별도의 모듈
    rpc FindCounselorUserRelationships (FindCounselorUserRelationshipsRequest) returns (FindCounselorUserRelationshipsResponse);

    // 상담 기법
    rpc CreateCounselTechnique (CreateCounselTechniqueRequest) returns (CreateCounselTechniqueResponse);
    rpc FindCounselTechniques (FindCounselTechniquesRequest) returns (FindCounselTechniquesResponse);
    rpc FindCounselTechniqueById (FindCounselTechniqueByIdRequest) returns (FindCounselTechniqueByIdResponse);
    rpc UpdateCounselTechnique (UpdateCounselTechniqueRequest) returns (UpdateCounselTechniqueResponse);
    rpc SaveCounselTechniqueSequence (SaveCounselTechniqueSequenceRequest) returns (SaveCounselTechniqueSequenceResponse);

    // Persona
    rpc CreatePersona (CreatePersonaRequest) returns (CreatePersonaResponse);
    rpc FindPersonas (FindPersonasRequest) returns (FindPersonasResponse);
    rpc FindPersonaById (FindPersonaByIdRequest) returns (FindPersonaByIdResponse);
    rpc UpdatePersona (UpdatePersonaRequest) returns (UpdatePersonaResponse);

    // Context
    rpc CreateContext (CreateContextRequest) returns (CreateContextResponse);
    rpc FindContexts (FindContextsRequest) returns (FindContextsResponse);
    rpc FindContextById (FindContextByIdRequest) returns (FindContextByIdResponse);
    rpc UpdateContext (UpdateContextRequest) returns (UpdateContextResponse);

    // Instruction
    rpc CreateInstruction (CreateInstructionRequest) returns (CreateInstructionResponse);
    rpc FindInstructions (FindInstructionsRequest) returns (FindInstructionsResponse);
    rpc FindInstructionById (FindInstructionByIdRequest) returns (FindInstructionByIdResponse);
    rpc UpdateInstruction (UpdateInstructionRequest) returns (UpdateInstructionResponse);

    // InstructionItem
    rpc CreateInstructionItem (CreateInstructionItemRequest) returns (CreateInstructionItemResponse);
    rpc FindInstructionItems (FindInstructionItemsRequest) returns (FindInstructionItemsResponse);
    rpc FindInstructionItemById (FindInstructionItemByIdRequest) returns (FindInstructionItemByIdResponse);
    rpc UpdateInstructionItem (UpdateInstructionItemRequest) returns (UpdateInstructionItemResponse);

    // Tone
    rpc CreateTone (CreateToneRequest) returns (CreateToneResponse);
    rpc FindTones (FindTonesRequest) returns (FindTonesResponse);
    rpc FindToneById (FindToneByIdRequest) returns (FindToneByIdResponse);
    rpc UpdateTone (UpdateToneRequest) returns (UpdateToneResponse);
}


// 상담
message CreateCounselRequest {
    string user_id = 1;                       
    string counselor_id = 2;
    optional string intro_message = 3;
    optional string response_message = 4;
}
  
message CreateCounselResponse {
    com.hearlers.v1.model.Counsel counsel = 1;
    repeated com.hearlers.v1.model.CounselMessage counsel_messages = 2;
}

message FindCounselsRequest {
    string user_id = 1;
    optional string counselor_id = 2;
}

message FindCounselsResponse {
    repeated com.hearlers.v1.model.Counsel counsels = 1;
}

message FindCounselByIdRequest {
    string counsel_id = 1;
}

message FindCounselByIdResponse {
    optional com.hearlers.v1.model.Counsel counsel = 1;
}


// 상담 메시지
message CreateMessageRequest {
    string counsel_id = 1;
    string message = 2;
}

message CreateMessageResponse {
    com.hearlers.v1.model.CounselMessage created_counsel_message = 1;
    com.hearlers.v1.model.CounselMessage counselor_response_message = 2;
}

message FindMessagesRequest {
    string counsel_id = 1;
}

message FindMessagesResponse {
    repeated com.hearlers.v1.model.CounselMessage counsel_messages = 1;
}

message ReactMessageRequest {
    string message_id = 1;
    com.hearlers.v1.model.CounselMessageReaction reaction = 2;
}

message ReactMessageResponse {
    com.hearlers.v1.model.CounselMessage counsel_message = 1;
}


// 상담사
message CreateCounselorRequest {
    string tone_id = 1;
    string name = 2;
    string description = 3;
    com.hearlers.v1.model.CounselorGender counselor_gender = 4;
}

message CreateCounselorResponse {
    com.hearlers.v1.model.Counselor counselor = 1;
}

message FindCounselorsRequest {
    optional string tone_id = 1;
}

message FindCounselorsResponse {
    repeated com.hearlers.v1.model.Counselor counselors = 1;
}

message FindCounselorByIdRequest {
    string counselor_id = 1;
}

message FindCounselorByIdResponse {
    optional com.hearlers.v1.model.Counselor counselor = 1;
}

message UpdateCounselorRequest {
    string counselor_id = 1;
    optional string tone_id = 2;
    optional string name = 3;
    optional string description = 4;
    optional com.hearlers.v1.model.CounselorGender counselor_gender = 5;
}

message UpdateCounselorResponse {
    com.hearlers.v1.model.Counselor counselor = 1;
}


// 상담사와 유저의 관계
message FindCounselorUserRelationshipsRequest {
    string counselor_id = 1;
    string user_id = 2;
}

message FindCounselorUserRelationshipsResponse {
    repeated com.hearlers.v1.model.CounselorUserRelationship counselor_user_relationships = 1;
}


// 상담 기법
message CreateCounselTechniqueRequest {
    string name = 1;
    optional string tone_id = 2;
    string context_id = 3;
    string instruction_id = 4;
    com.hearlers.v1.model.CounselTechniqueStage counsel_technique_stage = 5;
    optional string next_counsel_technique_id = 6;
}

message CreateCounselTechniqueResponse {
    com.hearlers.v1.model.CounselTechnique counsel_technique = 1;
}

message FindCounselTechniquesRequest {
    optional string name = 1;
    optional string tone_id = 2;
    optional com.hearlers.v1.model.CounselTechniqueStage counsel_technique_stage = 3;
}

message FindCounselTechniquesResponse {
    repeated com.hearlers.v1.model.CounselTechnique counsel_techniques = 1;
}

message FindCounselTechniqueByIdRequest {
    string counsel_technique_id = 1;
}

message FindCounselTechniqueByIdResponse {
    optional com.hearlers.v1.model.CounselTechnique counsel_technique = 1;
}

message UpdateCounselTechniqueRequest {
    string counsel_technique_id = 1;
    optional string name = 2;
    optional string tone_id = 3;
    optional string context_id = 4;
    optional string instruction_id = 5;
    optional com.hearlers.v1.model.CounselTechniqueStage counsel_technique_stage = 6;
    optional string next_counsel_technique_id = 7;
}

message UpdateCounselTechniqueResponse {
    com.hearlers.v1.model.CounselTechnique counsel_technique = 1;
}

message SaveCounselTechniqueSequenceRequest {
    repeated string counsel_technique_ids = 1;
}

message SaveCounselTechniqueSequenceResponse {
    repeated com.hearlers.v1.model.CounselTechnique counsel_techniques = 1;
}

// Persona
message CreatePersonaRequest {
    string counselor_id = 1;
    string body = 2;
}

message CreatePersonaResponse {
    com.hearlers.v1.model.Persona persona = 1;
}

message FindPersonasRequest {
    optional string counselor_id = 1;
}

message FindPersonasResponse {
    repeated com.hearlers.v1.model.Persona personas = 1;
}

message FindPersonaByIdRequest {
    string persona_id = 1;
}

message FindPersonaByIdResponse {
    optional com.hearlers.v1.model.Persona persona = 1;
}

message UpdatePersonaRequest {
    string persona_id = 1;
    optional string body = 2;
}

message UpdatePersonaResponse {
    com.hearlers.v1.model.Persona persona = 1;
}


// Context
message CreateContextRequest {
    string name = 1;
    string body = 2;
    repeated string placeholders = 3;
}

message CreateContextResponse {
    com.hearlers.v1.model.Context context = 1;
}

message FindContextsRequest {
    optional string name = 1;
}

message FindContextsResponse {
    repeated com.hearlers.v1.model.Context contexts = 1;
}

message FindContextByIdRequest {
    string context_id = 1;
}

message FindContextByIdResponse {
    optional com.hearlers.v1.model.Context context = 1;
}

message UpdateContextRequest {
    string context_id = 1;
    optional string name = 2;
    optional string body = 3;
    repeated string placeholders = 4;
}

message UpdateContextResponse {
    com.hearlers.v1.model.Context context = 1;
}


// Instruction
message CreateInstructionRequest {
    string name = 1;
    optional string initial_sentence = 2;
    repeated string instruction_item_ids = 3;
}

message CreateInstructionResponse {
    com.hearlers.v1.model.Instruction instruction = 1;
}

message FindInstructionsRequest {
    optional string name = 1;
}

message FindInstructionsResponse {
    repeated com.hearlers.v1.model.Instruction instructions = 1;
}

message FindInstructionByIdRequest {
    string instruction_id = 1;
}

message FindInstructionByIdResponse {
    optional com.hearlers.v1.model.Instruction instruction = 1;
}

message UpdateInstructionRequest {
    string instruction_id = 1;
    optional string name = 2;
    optional string initial_sentence = 3;
    repeated string instruction_item_ids = 4;
}

message UpdateInstructionResponse {
    com.hearlers.v1.model.Instruction instruction = 1;
}


// InstructionItem
message CreateInstructionItemRequest {
    string body = 1;
}

message CreateInstructionItemResponse {
    com.hearlers.v1.model.InstructionItem instruction_item = 1;
}

message FindInstructionItemsRequest {
    optional string keyword = 1;
}

message FindInstructionItemsResponse {
    repeated com.hearlers.v1.model.InstructionItem instruction_items = 1;
}

message FindInstructionItemByIdRequest {
    string instruction_item_id = 1;
}

message FindInstructionItemByIdResponse {
    optional com.hearlers.v1.model.InstructionItem instruction_item = 1;
}

message UpdateInstructionItemRequest {
    string instruction_item_id = 1;
    optional string body = 2;
}

message UpdateInstructionItemResponse {
    com.hearlers.v1.model.InstructionItem instruction_item = 1;
}


// Tone
message CreateToneRequest {
    string name = 1;
    string body = 2;
}

message CreateToneResponse {
    com.hearlers.v1.model.Tone tone = 1;
}

message FindTonesRequest {
    optional string name = 1;
}

message FindTonesResponse {
    repeated com.hearlers.v1.model.Tone tones = 1;
}

message FindToneByIdRequest {
    string tone_id = 1;
}

message FindToneByIdResponse {
    optional com.hearlers.v1.model.Tone tone = 1;
}

message UpdateToneRequest {
    string tone_id = 1;
    optional string name = 2;
    optional string body = 3;
}

message UpdateToneResponse {
    com.hearlers.v1.model.Tone tone = 1;
}
